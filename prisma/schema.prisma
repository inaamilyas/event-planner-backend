// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id          Int     @id @default(autoincrement())
  name        String?
  email       String  @unique
  password    String?
  profile_pic String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  events events[]
}

model venue_managers {
  id          Int     @id @default(autoincrement())
  name        String?
  email       String  @unique
  password    String?
  phone       String?
  profile_pic String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  venues venues[]
}

model events {
  id           Int       @id @default(autoincrement())
  name         String?
  date         DateTime?
  time         String?
  budget       Int?
  about        String?
  no_of_guests Int?
  user_id      Int
  picture      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  venue_booking venue_booking[]
}

model venues {
  id        Int     @id @default(autoincrement())
  name      String?
  latitude  Float?
  longitude Float?
  phone     String?
  address   String?
  about     String?
  owner_id  Int
  picture   String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  owner           venue_managers    @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  venue_booking   venue_booking[]
  venue_food_menu venue_food_menu[]
}
model venue_booking {
  id            Int                @id @default(autoincrement())
  venue_id      Int
  event_id      Int
  phone         String?
  date          DateTime?
  start_time    String?
  end_time      String?
   created_at DateTime @default(now())
  updated_at DateTime @updatedAt @default(now())
  

  venue         venues             @relation(fields: [venue_id], references: [id], onDelete: Cascade)
  event         events             @relation(fields: [event_id], references: [id], onDelete: Cascade)
  bookingFoodMenu booking_food_menu[] // Updated: relation to the junction table
}

model venue_food_menu {
  id           Int                @id @default(autoincrement())
  venue_id     Int
  name         String?
  price        String?
  is_available Boolean? @default(true)
  picture      String?

  venue        venues             @relation(fields: [venue_id], references: [id], onDelete: Cascade)
  bookingFoodMenu booking_food_menu[] // Updated: relation to the junction table
}

model booking_food_menu {
  id             Int              @id @default(autoincrement())
  booking_id     Int
  quantity Int?
  food_menu_id   Int

  venue_booking  venue_booking    @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  venue_food_menu venue_food_menu @relation(fields: [food_menu_id], references: [id], onDelete: Cascade)

  @@unique([booking_id, food_menu_id]) // Optional: To prevent duplicate entries for the same booking and menu item
}